// chatbot/askChatbot.controller.js

import { generateSQLChain, refineAnswerChain } from "./chains.js";
import { extractSQL, extractMessageText, extractTextBeforeSQL } from "./parser.js";
import { loadSchema } from "./schemaLoader.js";
import customerModel from "../../../models/Customer.js";
import pool from "../../../models/db.js";
import jwt from "jsonwebtoken";
import { encrypt } from "./encrypt.js";
import chatbotModel from "../../../models/Chatbot.js";
import slugify from "slugify";
import productModel from "../../../models/Product.js";

export const askChatbot = async (req, res) => {
    let productDetailUrl = null;

    const authHeader = req.headers.authorization;
    const token = authHeader?.split(" ")[1];

    if (!token) {
        return res.status(401).json({ message: "No token provided" });
    }

    let decoded;
    try {
        decoded = jwt.verify(token, process.env.JWT_KEY);
    } catch (err) {
        return res.status(401).json({ message: "Token invalid or expired" });
    }

    const email = decoded.email;
    const userQuestion = req.body.question;

    try {
        const products = await productModel.getAll();
        const history = await chatbotModel.findByEmail(email);
        const historyQues = history.map((item) => item.question);

        const schema = await loadSchema(); // ✅ Load from file dynamically
        const customer = await customerModel.findEmail(email);

        // 1. Generate AI SQL response
        const firstResponse = await generateSQLChain.invoke({
            email,
            customer: JSON.stringify(customer),
            schema,
            question: userQuestion,
            products: JSON.stringify(products),
        });

        const aiText = firstResponse.content; // ✅ .content instead of .text
        const sql = extractSQL(aiText);
        const message = extractMessageText(aiText);

        const aitextBeforeSQL = extractTextBeforeSQL(aiText);
        console.log("Text Before SQL:", aitextBeforeSQL);

        console.log("AI Text:", aiText);

        console.log("AI SQL:", sql);

        let dbRows = [];
        if (sql) {
            try {
                [dbRows] = await pool.execute(sql);
            } catch (error) {
                console.error("SQL Execution Error:", error.message);
            }
        } else {
            console.warn("No SQL generated by AI for this question.");
        }

        const vals = Array.isArray(dbRows) ? dbRows.map(row => Object.values(row)[0]) : [];

        console.log("Values:", vals);
        console.log("DB Rows:", dbRows);

        // Generate product detail URL
        if (Array.isArray(dbRows) && dbRows.length > 0) {
            productDetailUrl = dbRows
                .filter(row => row.id && row.name)
                .map(row => {
                    const slug = slugify(row.name, { lower: true });
                    const url = `${process.env.FRONTEND_URL}/san-pham/${slug}-${row.id}.html`;
                    return `[${row.name}](${url})`;
                });
        }

        console.log("Product Detail URL:", productDetailUrl);

        // 2. Refine final AI answer
        const secondResponse = await refineAnswerChain.invoke({
            question: userQuestion,
            sql: sql || "",
            dbRows: JSON.stringify(dbRows),
            historyQues: JSON.stringify(historyQues),
            productDetailUrl: productDetailUrl,
        });

        const aiFinalAnswer = secondResponse.content; // ✅ .content instead of .text
        console.log("AI Final Answer:", aiFinalAnswer);

        // 3. Save Chat History
        try {
            const saveQuery = `
        INSERT INTO chat_history (user_email, question, ai_answer, message, db_sql, db_rows, vals)
        VALUES (?, ?, ?, ?, ?, ?, ?)
      `;
            await pool.execute(saveQuery, [
                email,
                encrypt(userQuestion),
                encrypt(aiText),
                encrypt(JSON.stringify(aiFinalAnswer)),
                sql,
                JSON.stringify(dbRows),
                JSON.stringify(vals),
            ]);
        } catch (error) {
            console.error("Saving chat history failed:", error.message);
        }

        res.json({
            aiAnswer: aiText,
            aitextBeforeSQL,
            sql,
            dbRows,
            vals,
            message,
            aiFinalAnswer,
            productDetailUrl,
        });

    } catch (error) {
        console.error("Controller Error:", error.message);
        res.status(500).json({ error: error.message });
    }
};
