import { ChatGoogleGenerativeAI } from "@langchain/google-genai";
import { ChatPromptTemplate, MessagesPlaceholder } from "@langchain/core/prompts";
import { RunnableSequence } from "@langchain/core/runnables";
import productModel from "../../../models/Product.js"; // ‚úÖ your model
import { StateGraph } from "@langchain/langgraph";
import pool from "../../../models/db.js";
import { extractSQL } from "./parser.js";
import { loadSchema } from "./schemaLoader.js";
import { z } from "zod";
import slugify from "slugify";
import { saveChatHistory } from "./saveChatHistory.js";

const model = new ChatGoogleGenerativeAI({
    model: "gemini-1.5-pro",
    apiKey: process.env.GEMINI_API_KEY,
    temperature: 0.3,
});

async function intentClassifier({ messages, email }) {
    const lastMsg = messages[messages.length - 1]?.content;

    const intent = await model.invoke([
        ["system", `
            B·∫°n l√† b·ªô ph√¢n lo·∫°i intent. H√£y ph√¢n lo·∫°i c√¢u h·ªèi kh√°ch th√†nh 1 trong 4 nh√≥m: 
- **consult**: kh√°ch mu·ªën t∆∞ v·∫•n ch·ªçn s·∫£n ph·∫©m ph√π h·ª£p v·ªõi nhu c·∫ßu.
- **sql**: kh√°ch mu·ªën truy v·∫•n d·ªØ li·ªáu (li·ªát k√™ ƒë∆°n h√†ng, s·∫£n ph·∫©m gi·∫£m gi√°, s·∫£n ph·∫©m ƒë√£ mua...).
- **cancel**: kh√°ch mu·ªën h·ªßy ƒë∆°n h√†ng.
- **policy**: kh√°ch h·ªèi v·ªÅ ch√≠nh s√°ch ƒë·ªïi tr·∫£, giao h√†ng, b·∫£o h√†nh.
Tr·∫£ v·ªÅ duy nh·∫•t 1 t·ª´: consult, sql, policy, ho·∫∑c cancel.
`],
        ["human", `C√¢u h·ªèi c·ªßa kh√°ch: "${lastMsg}", Email c·ªßa kh√°ch: "${email}". Ch·ªâ tr·∫£ v·ªÅ 1 t·ª´: consult, sql, policy ho·∫∑c cancel.`]
    ]);

    const result = intent.content?.trim().toLowerCase();
    console.log("Guest question:", lastMsg);
    console.log("üü® Raw AI intent result:", intent.content);
    console.log("‚úÖ Parsed intent:", result);

    return {
        messages,
        next: result // ‚úÖ explicitly included in returned state
    };
}

//CONSULTAGENT

const consultPromptTemplate = ChatPromptTemplate.fromMessages([
    ["system", `
B·∫°n l√† tr·ª£ l√Ω AI t∆∞ v·∫•n c·∫ßu l√¥ng c·ªßa shop.
Am hi·ªÉu t·∫•t c·∫£ nh·ªØng ki·∫øn th·ª©c v·ªÅ c·∫ßu l√¥ng.
Tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán.
Ch·ªâ t∆∞ v·∫•n c√°c s·∫£n ph·∫©m li√™n quan ƒë·∫øn c√¢u h·ªèi kh√°ch.
G·ª£i √Ω ƒë√∫ng tr√¨nh ƒë·ªô ng∆∞·ªùi ch∆°i v√† gi√° h·ª£p l√Ω.
N·∫øu kh√°ch h·ªèi m∆° h·ªì, h√£y h·ªèi l·∫°i r√µ nhu c·∫ßu.
S·∫£n ph·∫©m ƒëang b√°n:
{productList}
  `],
    new MessagesPlaceholder("messages"),
]);

const consultChain = RunnableSequence.from([consultPromptTemplate, model]);

async function consultAgent({ messages, email }) {
    const products = await productModel.getAll();

    const productList = products
        .map(p => `${p.name} (gi√° ${p.price}ƒë)`)
        .join(", ");

    const response = await consultChain.invoke({
        messages,
        productList,
    });

    const aiText = response.content;

    // Auto-match product names mentioned in AI response
    const matched = products.filter(p =>
        aiText.toLowerCase().includes(p.name.toLowerCase())
    );

    let productDetailUrls = "";
    if (matched.length > 0) {
        const urls = matched.map(p => {
            const slug = slugify(p.name, { lower: true });
            const url = `${process.env.FRONTEND_URL}/san-pham/${slug}-${p.id}.html`;
            return `[${p.name}](${url})`;
        });
        productDetailUrls = `\nüì¶ Xem chi ti·∫øt:\n${urls.join("\n")}`;
    }

    console.log("‚úÖ product url:", productDetailUrls);

    await saveChatHistory({
        email,
        question: messages[messages.length - 1]?.content || "",
        aiAnswer: aiText + productDetailUrls,
        type: "consult",
        sql: null,
        dbRows: []
    });


    return {
        messages: [{ content: aiText + productDetailUrls }]
    };
}

//SQLAGENT

const sqlPromptTemplate = ChatPromptTemplate.fromMessages([
    ["system", `
B·∫°n l√† AI sinh c√¢u l·ªánh SQL t·ª´ c√¢u h·ªèi kh√°ch h√†ng v√† c√°c ch√≠nh s√°ch c·ªßa shop.
Ch·ªâ sinh SQL SELECT ƒë√∫ng c√∫ ph√°p theo schema b√™n d∆∞·ªõi.
Kh√¥ng c·∫ßn gi·∫£i th√≠ch.
Tr·∫£ l·∫°i SQL duy nh·∫•t b√™n trong block: \`\`\`sql ... \`\`\`

L∆∞u √Ω: 
- Khi kh√°ch h·ªèi v·ªÅ th√¥ng tin c√° nh√¢n c·ªßa h·ªç th√¨ kh√¥ng ƒë∆∞·ª£c ti·∫øt l·ªô.
- Ch·ªâ sinh SQL SELECT ƒë√∫ng c√∫ ph√°p theo schema b√™n d∆∞·ªõi.
- KH√îNG ƒë∆∞·ª£c sinh b·∫•t k·ª≥ c√¢u l·ªánh UPDATE, DELETE, INSERT, DROP.
- N·∫øu truy v·∫•n t·ª´ b·∫£ng product th√¨ PH·∫¢I lu√¥n c√≥ c·ªôt \`name\` v√† \`id\` trong SELECT (ƒë·ªÉ t·∫°o URL s·∫£n ph·∫©m).
vd: H·ªèi gi√° th√¨ ph·∫£i th√™m c·ªôt price v√† c·ªôt name trong SELECT.
- KH√îNG gi·∫£i th√≠ch. Tr·∫£ v·ªÅ SQL duy nh·∫•t b√™n trong block: \`\`\`sql ... \`\`\`

Schema:
{schema}
`],
    ["human", `
Email ng∆∞·ªùi d√πng hi·ªán t·∫°i l√†: {email}`],
    new MessagesPlaceholder("messages"),
]);


const sqlChain = RunnableSequence.from([sqlPromptTemplate, model]);

const refinePrompt = ChatPromptTemplate.fromMessages([
    ["system", `
B·∫°n l√† tr·ª£ l√Ω AI c·∫ßu l√¥ng. D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu th√¥ t·ª´ k·∫øt qu·∫£ SQL (d·∫°ng danh s√°ch ho·∫∑c b·∫£ng). H√£y di·ªÖn gi·∫£i l·∫°i n·ªôi dung m·ªôt c√°ch l·ªãch s·ª±, ng·∫Øn g·ªçn v√† d·ªÖ hi·ªÉu v·ªõi kh√°ch h√†ng d·ª±a v√†o th√¥ng tin schema d∆∞·ªõi ƒë√¢y.

N·∫øu danh s√°ch l√† ƒë∆°n h√†ng: d√πng t·ª´ "ƒê∆°n h√†ng", "ƒë√£ b·ªã h·ªßy", v.v.
N·∫øu l√† s·∫£n ph·∫©m: g·ª£i √Ω nh·∫π nh√†ng, kh√¥ng li·ªát k√™ c·ª©ng nh·∫Øc.
N·∫øu t√¨m c√≥ link s·∫£n ph·∫©m th√¨ ghi l√† Xem chi ti·∫øt.

Schema:
{schema}
`],
    ["human", `{raw}`]
]);


const refineSQLResponseChain = RunnableSequence.from([refinePrompt, model]);

async function sqlAgent({ messages, email }) {
    const schema = await loadSchema();

    const response = await sqlChain.invoke({
        messages,
        schema,
        email,
    });

    const sql = extractSQL(response.content);
    console.log("üß† AI SQL:", sql);

    let dbRows = [];
    try {
        if (sql) {
            [dbRows] = await pool.execute(sql);
        }
    } catch (err) {
        return {
            messages: [{ content: `‚ùå L·ªói SQL: ${err.message}` }]
        };
    }

    console.log("‚úÖ DB rows:", dbRows);

    // Generate product URLs if applicable
    let productDetailUrl = "";
    if (Array.isArray(dbRows) && dbRows.length > 0) {
        const urls = dbRows
            .filter(row => row.id && row.name)
            .map(row => {
                const slug = slugify(row.name, { lower: true });
                const url = `${process.env.FRONTEND_URL}/san-pham/${slug}-${row.id}.html`;
                return `[${row.name}](${url})`;
            });

        if (urls.length > 0) {
            productDetailUrl = `\nüì¶ Xem chi ti·∫øt:\n${urls.join("\n")}`;
        }
    }

    console.log("‚úÖ product url:", productDetailUrl);

    let resultMessage = "‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p.";

    if (dbRows.length > 0) {
        const headers = Object.keys(dbRows[0]).join(" | ");
        const rows = dbRows.map(row => Object.values(row).join(" | ")).join("\n");
        resultMessage = `‚úÖ K·∫øt qu·∫£:\n${headers}\n${rows}${productDetailUrl}`;
    }

    console.log('resultMessage', resultMessage);

    const refined = await refineSQLResponseChain.invoke({
        raw: resultMessage,
        schema
    });

    console.log("‚úÖ AI response:", refined.content);

    await saveChatHistory({
        email,
        question: messages.at(-1)?.content || "",
        aiAnswer: refined.content,
        type: "sql",
        sql,
        dbRows
    });

    return { messages: [{ content: refined.content }] };

}

//CANCELAGENT

const cancelPrompt = ChatPromptTemplate.fromMessages([
    ["system", `
B·∫°n l√† tr·ª£ l√Ω AI x·ª≠ l√Ω y√™u c·∫ßu h·ªßy ƒë∆°n h√†ng.

        Lu·∫≠t:
    - N·∫øu kh√°ch mu·ªën h·ªßy ƒë∆°n, tr·∫£ v·ªÅ: HUY < m√£ ƒë∆°n >
    - N·∫øu kh√°ch x√°c nh·∫≠n, tr·∫£ v·ªÅ: CONFIRM < m√£ ƒë∆°n >
    - N·∫øu kh√°ch t·ª´ ch·ªëi, tr·∫£ v·ªÅ: CANCEL
    - N·∫øu kh√¥ng hi·ªÉu, tr·∫£ v·ªÅ: UNKNOWN

V√≠ d·ª•:
    Kh√°ch: "T√¥i mu·ªën h·ªßy ƒë∆°n h√†ng 12" ‚Üí HUY 12
Kh√°ch: "[X√ÅC NH·∫¨N H·ª¶Y ƒê∆†N H√ÄNG S·ªê 12]" ‚Üí CONFIRM 12
Kh√°ch: "[KH√îNG H·ª¶Y]" ‚Üí CANCEL
Kh√°ch: "T√¥i c·∫ßn t∆∞ v·∫•n th√™m" ‚Üí UNKNOWN
        `],
    new MessagesPlaceholder("messages")
]);

const cancelChain = RunnableSequence.from([cancelPrompt, model]);

async function cancelAgent({ messages, email }) {
    const response = await cancelChain.invoke({ messages });
    const result = response.content.trim();

    const confirmMatch = result.match(/^CONFIRM (\d+)/i);
    const huyMatch = result.match(/^HUY (\d+)/i);

    if (confirmMatch) {
        const orderId = confirmMatch[1];
        try {
            await pool.execute("UPDATE `order` SET order_status_id = 6 WHERE id = ?", [orderId]);

            const aiAnswer = `‚úÖ ƒê√£ h·ªßy ƒë∆°n h√†ng s·ªë ${orderId} th√†nh c√¥ng.Ch√∫c qu√Ω kh√°ch m·ªôt ng√†y t·ªët l√†nh.`;
            await saveChatHistory({ email, question: messages.at(-1).content, aiAnswer, type: "cancel", sql: `UPDATE order SET order_status_id = 6 WHERE id = ${orderId}`, dbRows: [] });

            return { messages: [{ content: aiAnswer }] };
        } catch (err) {
            return { messages: [{ content: `‚ùå L·ªói khi h·ªßy ƒë∆°n: ${err.message}` }] };
        }
    }

    if (huyMatch) {
        const orderId = huyMatch[1];
        const aiAnswer = `B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy ƒë∆°n h√†ng s·ªë ${orderId} kh√¥ng ?\nVui l√≤ng x√°c nh·∫≠n b·∫±ng: [X√ÅC NH·∫¨N H·ª¶Y ƒê∆†N H√ÄNG S·ªê ${orderId}] ho·∫∑c[KH√îNG H·ª¶Y]`;

        await saveChatHistory({ email, question: messages.at(-1).content, aiAnswer, type: "cancel", sql: null, dbRows: [] });

        return { messages: [{ content: aiAnswer }] };
    }

    if (result === "CANCEL") {
        const aiAnswer = "Ch√∫c qu√Ω kh√°ch m·ªôt ng√†y t·ªët l√†nh.";
        await saveChatHistory({ email, question: messages.at(-1).content, aiAnswer, type: "cancel", sql: null, dbRows: [] });
        return { messages: [{ content: aiAnswer }] };
    }

    const fallback = "Xin h√£y cung c·∫•p m√£ ƒë∆°n h√†ng c·∫ßn h·ªßy, v√≠ d·ª•: 'h·ªßy ƒë∆°n h√†ng s·ªë 123'";
    await saveChatHistory({ email, question: messages.at(-1).content, aiAnswer: fallback, type: "cancel", sql: null, dbRows: [] });
    return { messages: [{ content: fallback }] };
}

async function shouldContinue({ messages }) {
    return "__end__";
}

const SupervisorState = z.object({
    messages: z.array(z.any()),
    next: z.string().optional(),
    email: z.string(),
});


export const supervisorGraph = new StateGraph(SupervisorState)
    .addNode("intent", intentClassifier)
    .addNode("consult", consultAgent)
    .addNode("sql", sqlAgent)
    .addNode("cancel", cancelAgent)
    .addEdge("__start__", "intent")
    .addConditionalEdges("intent", (state) => {
        console.log("üì¶ Routing intent state.next:", state.next);
        return state.next;
    }, {
        consult: "consult",
        sql: "sql",
        cancel: "cancel",
    })
    .addEdge("consult", "__end__")
    .addEdge("sql", "__end__")
    .addEdge("cancel", "__end__")
    .compile();
