@startuml

' Define classes with their attributes and methods
class Base {
    +constructor(data: object)
    +buildLimit(page: number, item_per_page: number): string
    +all(page: number, item_per_page: number): Promise<object[]>
    +fetch(condition: string, sort: string, limit: string): Promise<object[]>
    +getByPattern(search: string, page: number, item_per_page: number): Promise<object[]>
    +find(id: number): Promise<object>
    +convertArrayToObjects(rows: object[]): object[]
    +destroy(): Promise<boolean>
    +save(data: object): Promise<number>
    +update(): Promise<boolean>
}

class Brand {
    -id: Number
    -name: String
    -description: String
    -created_at: Date
    -updated_at: Date
    +convertRowToObject(row: Object): Brand
}

class Product {
    -id: Number
    -name: String
    -description: String
    -price: Number
    -sale_price: Number
    -featured_image: String
    -brand_id: Number
    -created_at: Date
    -updated_at: Date
    +convertRowToObject(row: Object): Product
    +getBy(array_conds: Array<Object>, array_sorts: Array<Object>, page: Number, qty_per_page: Number): Promise<Array<Product>>
    +getImageItems(): Promise<Array<ImageItem>>
    +getBrand(): Promise<Brand>
    +getComments(): Promise<Array<Comment>>
}

class Order {
    -id: Number
    -customer_id: Number
    -order_status_id: Number
    -shipping_ward_id: Number
    -total_price: Number
    -created_at: Date
    -updated_at: Date
    +convertRowToObject(row: Object): Order
    +getByCustomerId(customer_id: Number): Promise<Array<Order>>
    +getOrderItems(): Promise<Array<OrderItem>>
    +getStatus(): Promise<Status>
    +getShippingWard(): Promise<Ward>
    +getSubTotalPrice(): Promise<Number>
}

class OrderItem {
    -id: Number
    -order_id: Number
    -product_id: Number
    -qty: Number
    -unit_price: Number
    -total_price: Number
    -created_at: Date
    -updated_at: Date
    +convertRowToObject(row: Object): OrderItem
    +getByOrderId(order_id: Number): Promise<Array<OrderItem>>
    +getProduct(): Promise<Product>
}

class Category {
    -id: Number
    -name: String
    -description: String
    -created_at: Date
    -updated_at: Date
    +convertRowToObject(row: Object): Category
}

class Comment {
    -id: Number
    -product_id: Number
    -customer_id: Number
    -content: String
    -rating: Number
    -created_at: Date
    -updated_at: Date
    +convertRowToObject(row: Object): Comment
    +getByProductId(product_id: Number): Promise<Array<Comment>>
}

class Customer {
    -id: Number
    -name: String
    -email: String
    -password: String
    -phone: String
    -created_at: Date
    -updated_at: Date
    +convertRowToObject(row: Object): Customer
    +findEmail(email: String): Promise<Customer>
}

class ImageItem {
    -id: Number
    -product_id: Number
    -image_url: String
    -created_at: Date
    -updated_at: Date
    +convertRowToObject(row: Object): ImageItem
    +getByProductId(product_id: Number): Promise<Array<ImageItem>>
}

class Province {
    -id: Number
    -name: String
    -created_at: Date
    -updated_at: Date
    +convertRowToObject(row: Object): Province
    +getDistricts(): Promise<Array<District>>
}

class District {
    -id: Number
    -name: String
    -province_id: Number
    -created_at: Date
    -updated_at: Date
    +convertRowToObject(row: Object): District
    +getProvince(): Promise<Province>
    +getWards(): Promise<Array<Ward>>
    +getByProvinceId(province_id: Number): Promise<Array<District>>
}

class Ward {
    -id: Number
    -name: String
    -district_id: Number
    -created_at: Date
    -updated_at: Date
    +convertRowToObject(row: Object): Ward
    +getDistrict(): Promise<District>
    +getByDistrictId(district_id: Number): Promise<Array<Ward>>
}

class Status {
    -id: Number
    -name: String
    -created_at: Date
    -updated_at: Date
    +convertRowToObject(row: Object): Status
}

class Transport {
    -id: Number
    -province_id: Number
    -name: String
    -created_at: Date
    -updated_at: Date
    +convertRowToObject(row: Object): Transport
    +getByProvinceId(province_id: Number): Promise<Transport>
}
class PoseDetection {
    -model: Object
    +detectLandmarks(image: Image): Object
}

class ShirtOverlay {
    -shirtImage: Image
    +overlayShirt(image: Image, landmarks: Object): Image
    +adjustScaleAndPosition(image: Image, landmarks: Object): Image
}

class UserInterface {
    +displayShirtOptions(): void
    +handleButtonPress(): void
}

' Define relationships between classes
Product "1" *-- "0..*" ImageItem: has
Product "1" *-- "0..*" Comment: has
Product "1" *-- "0..*" OrderItem: has
Product "1" -- "1" Brand: belongs to

Category "1" *-- "0..*" Product: contains

Order "1" *-- "0..*" OrderItem: contains
Order "1" -- "1" Customer: placed by
Order "1" -- "1" Status: has
Order "1" -- "1" Ward: shipped to

Province "1" *-- "0..*" District: contains
District "1" *-- "0..*" Ward: contains
Ward "1" -- "1" District: belongs to
District "1" -- "1" Province: belongs to
Province "1" -- "1" Transport: belongs to

PoseDetection "1" *-- "0..*" ShirtOverlay: uses
ShirtOverlay "1" *-- "1" UserInterface: interacts with

@enduml
