// summarizeAllProducts.js
require("dotenv").config();
const { summarizeDescription } = require("./controllers/admin/summarizeDescription");
const productModel = require("./models/Product");
const db = require("./models/db"); // k·∫øt n·ªëi MySQL

(async () => {
    try {
        console.log("üöÄ B·∫Øt ƒë·∫ßu r√∫t g·ªçn m√¥ t·∫£ c√°c s·∫£n ph·∫©m ch∆∞a c√≥ short_description...");

        // 1Ô∏è‚É£ L·∫•y to√†n b·ªô s·∫£n ph·∫©m ch∆∞a c√≥ short_description
        const [products] = await db.query(`
      SELECT id, name, description 
      FROM product 
      WHERE (short_description IS NULL OR short_description = '') 
        AND description IS NOT NULL 
      LIMIT 100;
    `);

        console.log(`üì¶ T√¨m th·∫•y ${products.length} s·∫£n ph·∫©m c·∫ßn x·ª≠ l√Ω.`);

        // 2Ô∏è‚É£ Duy·ªát t·ª´ng s·∫£n ph·∫©m
        for (const p of products) {
            console.log(`üß† ƒêang r√∫t g·ªçn: ${p.name}`);

            const shortDesc = await summarizeDescription(p.description);
            if (!shortDesc) continue;

            await db.query(
                `UPDATE product SET short_description = ? WHERE id = ?`,
                [shortDesc, p.id]
            );

            console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t: ${p.name}`);
            // delay nh·∫π ƒë·ªÉ tr√°nh b·ªã rate limit
            await new Promise((r) => setTimeout(r, 1500));
        }

        console.log("üéØ Ho√†n t·∫•t c·∫≠p nh·∫≠t t·∫•t c·∫£ s·∫£n ph·∫©m!");
        process.exit(0);
    } catch (err) {
        console.error("‚ùå L·ªói:", err);
        process.exit(1);
    }
})();
