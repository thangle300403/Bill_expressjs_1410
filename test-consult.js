import dotenv from "dotenv";
dotenv.config();

import { consultChain } from "./controllers/api/Chatbot/agents/consult.js";
import { addToCartTool } from "./controllers/api/Chatbot/tools/addToCartTool.js";

// üß™ Simulate user asking to buy a specific product
const testMessages = [
    { role: "user", content: "T√¥i mu·ªën mua c√¢y v·ª£t Lining Aeronant 9000d." }
];

// üß™ Simulate your product list (should match what's in the DB ideally)
const productList = [
    {
        id: 1,
        name: "Lining Aeronant 9000d",
        sale_price: 3900000,
        quantity: 1,
        imageUrl: "http://localhost:3069/images/lining.jpg",
        productUrl: "http://localhost:3069/san-pham/lining-aeronant-9000d-1"
    },
    {
        id: 2,
        name: "Yonex Duora 10",
        sale_price: 3400000,
        quantity: 1,
        imageUrl: "http://localhost:3069/images/duora.jpg",
        productUrl: "http://localhost:3069/san-pham/yonex-duora-10-2"
    }
];

// üß™ Fake memory of chat history to help the AI
const historyFormatted = `
KH: v·ª£t cho ng∆∞·ªùi m·ªõi ch∆°i
AI: B·∫°n c√≥ th·ªÉ ch·ªçn Yonex Duora 10 ho·∫∑c Lining Aeronant 9000d. B·∫°n c√≥ mu·ªën th√™m v√†o gi·ªè h√†ng kh√¥ng ?
KH: T√¥i th√≠ch c√¢y Lining.
`;

const context = ""; // optional

// üöÄ Run test
const run = async () => {
    try {
        const result = await consultChain.invoke({
            messages: testMessages,
            productList,
            historyFormatted,
            context
        });

        console.log("üß† Full AI response:");
        console.dir(result, { depth: null });

        if (result.tool_calls?.length > 0) {
            for (const toolCall of result.tool_calls) {
                console.log("‚úÖ Tool called:", toolCall.name);
                console.log("üîß Args:", toolCall.args);
            }
        } else {
            console.log("‚ùå No tool invoked.");
        }
    } catch (err) {
        console.error("‚ùå Error running consult test:", err.message);
    }
};

run();
