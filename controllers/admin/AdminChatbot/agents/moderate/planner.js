import { ChatOpenAI } from "@langchain/openai";
import { ChatPromptTemplate, MessagesPlaceholder } from "@langchain/core/prompts";
import { RunnableSequence } from "@langchain/core/runnables";
import { classifySpamAgent } from "../moderate/moderateSubAgents/classifySpamAgent.js"
import { classifyToxicAgent } from "../moderate/moderateSubAgents/classifyToxicAgent.js";
import { softDeleteAgent } from "../moderate/moderateSubAgents/softDeleteAgent.js";
import { responder } from "../moderate/moderateSubAgents/responder.js";

const model = new ChatOpenAI({ modelName: "gpt-4o", temperature: 0 });

const plannerPrompt = ChatPromptTemplate.fromMessages([
    ["system", `
B·∫°n l√† AI l·∫≠p k·∫ø ho·∫°ch x·ª≠ l√Ω b√¨nh lu·∫≠n vi ph·∫°m cho admin.

Tr·∫£ v·ªÅ m·ªôt danh s√°ch JSON c√°c b∆∞·ªõc c·∫ßn th·ª±c hi·ªán. M·ªói ph·∫ßn t·ª≠ l√† m·ªôt chu·ªói.

C√°c b∆∞·ªõc h·ª£p l·ªá g·ªìm:
- classify_spam ‚Üí ki·ªÉm tra spam
- classify_toxic ‚Üí ki·ªÉm tra b√¨nh lu·∫≠n ti√™u c·ª±c
- soft_delete ‚Üí ch·ªâ th√™m n·∫øu admin y√™u c·∫ßu x√≥a
- responder ‚Üí tr·∫£ l·ªùi k·∫øt qu·∫£ cho admin

Ch·ªâ th√™m b∆∞·ªõc "soft_delete" n·∫øu admin c√≥ s·ª≠ d·ª•ng c√°c t·ª´ nh∆∞: "x√≥a", "lo·∫°i b·ªè", "delete", "remove", ho·∫∑c y√™u c·∫ßu h√†nh ƒë·ªông r√µ r√†ng, kh√¥ng ch·ªâ ki·ªÉm tra.

V√≠ d·ª•:
- "Ki·ªÉm tra b√¨nh lu·∫≠n spam" ‚Üí ["classify_spam", "responder"]
- "X√≥a c√°c b√¨nh lu·∫≠n ti√™u c·ª±c" ‚Üí ["classify_toxic", "soft_delete", "responder"]

Ch·ªâ tr·∫£ v·ªÅ JSON array. Kh√¥ng gi·∫£i th√≠ch.
`],
    new MessagesPlaceholder("messages")
]);


const plannerChain = RunnableSequence.from([plannerPrompt, model]);

export async function planSteps(state) {
    const stepListRaw = await plannerChain.invoke({ messages: state.messages });

    try {
        const plan = JSON.parse(stepListRaw.content);
        console.log("üß† Planner plan:", plan);
        return {
            plan,
            current_step_index: 0
        };
    } catch (err) {
        console.error("‚ùå K·∫ø ho·∫°ch kh√¥ng ph·∫£i JSON h·ª£p l·ªá:", stepListRaw.content);
        return { plan: [], current_step_index: -1 };
    }
}

export async function executeStep(state) {
    const currentStep = state.plan?.[state.current_step_index];
    console.log("‚ñ∂Ô∏è Executing step:", currentStep);

    const agentMap = {
        classify_spam: classifySpamAgent,
        classify_toxic: classifyToxicAgent,
        soft_delete: softDeleteAgent,
        responder
    };

    const agent = agentMap[currentStep];
    if (!agent) return { current_step_index: -1 };

    const result = await agent(state);

    return {
        ...state,
        ...result,
        current_step_index: state.current_step_index + 1
    };
}

