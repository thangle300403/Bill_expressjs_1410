// summarizeDescription.js
const OpenAI = require("openai");

// ‚öôÔ∏è Kh·ªüi t·∫°o client
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
});

/**
 * R√∫t g·ªçn m√¥ t·∫£ s·∫£n ph·∫©m cho embedding & chatbot.
 * @param {string} text - M√¥ t·∫£ g·ªëc c·ªßa s·∫£n ph·∫©m
 * @returns {Promise<string>} - M√¥ t·∫£ ƒë√£ r√∫t g·ªçn
 */
async function summarizeDescription(text) {
    if (!text || text.trim() === "") return "";

    const prompt = `
R√∫t g·ªçn m√¥ t·∫£ s·∫£n ph·∫©m c·∫ßu l√¥ng th√†nh 30‚Äì60 t·ª´, ch·ªâ gi·ªØ √Ω ch√≠nh:
- Lo·∫°i s·∫£n ph·∫©m (v·ª£t, gi√†y, √°o,...)
- ƒê·ªëi t∆∞·ª£ng s·ª≠ d·ª•ng (ng∆∞·ªùi m·ªõi, trung c·∫•p, chuy√™n nghi·ªáp)
- ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t (n·∫∑ng ƒë·∫ßu, nh·∫π ƒë·∫ßu, tr·ª£ l·ª±c,...)
- C√¥ng ngh·ªá ch√≠nh (n·∫øu c√≥)
- M·ª•c ƒë√≠ch s·ª≠ d·ª•ng (t·∫•n c√¥ng, ph√≤ng th·ªß, to√†n di·ªán)
B·ªè qua c√¢u qu·∫£ng c√°o ho·∫∑c l·∫∑p th∆∞∆°ng hi·ªáu.

M√¥ t·∫£ g·ªëc:
${text}
`;

    try {
        const res = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [{ role: "user", content: prompt }],
            temperature: 0.5,
        });

        const shortText = res.choices[0].message.content.trim();
        console.log("üß† M√¥ t·∫£ ƒë√£ r√∫t g·ªçn:", shortText);

        return shortText;
    } catch (err) {
        console.error("‚ùå L·ªói khi r√∫t g·ªçn m√¥ t·∫£:", err);
        return text.slice(0, 200); // fallback: tr·∫£ l·∫°i 200 k√Ω t·ª± ƒë·∫ßu ti√™n
    }
}

module.exports = { summarizeDescription };
