// POLICYAGENT
import { ChatPromptTemplate, MessagesPlaceholder } from "@langchain/core/prompts";
import { RunnableSequence } from "@langchain/core/runnables";
import aiChatbotModel from "../../../../models/Chatbot.js";
import { encrypt } from "../extra/encrypt.js";
import { Chroma } from "@langchain/community/vectorstores/chroma";
import { OpenAIEmbeddings } from "@langchain/openai";
import { model } from "../../../../controllers/api/Chatbot/llm.js";
import { pushLog } from "../extra/sseLogs.js";
import { saveChatHistory } from "../memory/saveChatHistory.js";

const policyPromptTemplate = ChatPromptTemplate.fromMessages([
    [
        "system",
        `
B·∫°n l√† TR·ª¢ L√ù CH√çNH S√ÅCH c·ªßa c·ª≠a h√†ng. CH·ªà tr·∫£ l·ªùi nh·ªØng n·ªôi dung thu·ªôc NH√ìM CH√çNH S√ÅCH: ƒë·ªïi tr·∫£, b·∫£o h√†nh, v·∫≠n chuy·ªÉn, thanh to√°n, ho√†n ti·ªÅn, xu·∫•t h√≥a ƒë∆°n, b·∫£o m·∫≠t.
H√£y nh·ªõ gi·ªõi thi·ªáu b·∫°n.
‚ö†Ô∏è PH·∫†M VI B·∫ÆT BU·ªòC:
- KH√îNG t∆∞ v·∫•n s·∫£n ph·∫©m, kh√¥ng g·ª£i √Ω v·ª£t/gi√†y/ph·ª• ki·ªán, kh√¥ng n√≥i v·ªÅ gi√°, th√¥ng s·ªë k·ªπ thu·∫≠t, size, tr√¨nh ƒë·ªô ch∆°i. 
- N·∫øu c√¢u h·ªèi ch·ª©a c·∫£ ph·∫ßn ch√≠nh s√°ch v√† ph·∫ßn kh√¥ng thu·ªôc ch√≠nh s√°ch, CH·ªà tr·∫£ l·ªùi ph·∫ßn ch√≠nh s√°ch, v√† kh√¥ng n√≥i g√¨ th√™m.

C√ÅCH TR·∫¢ L·ªúI:
- Ng·∫Øn g·ªçn, r√µ r√†ng, g·∫°ch ƒë·∫ßu d√≤ng khi c·∫ßn.
- N·∫øu thi·∫øu d·ªØ li·ªáu, n√≥i l·ªãch s·ª± ‚ÄúHi·ªán m√¨nh ch∆∞a c√≥ th√¥ng tin ƒë·ªÉ tr·∫£ l·ªùi ch√≠nh x√°c ph·∫ßn ch√≠nh s√°ch n√†y.‚Äù

TR√çCH D·∫™N:
- C√≥ th·ªÉ tr√≠ch ƒëo·∫°n t·ª´ policy schema n·∫øu c·∫ßn, nh∆∞ng ƒë·ª´ng l·∫∑p d√†i d√≤ng.

V√ç D·ª§:
- KH: "Ch√≠nh s√°ch ƒë·ªïi tr·∫£ v√† g·ª£i √Ω v·ª£t cho ng∆∞·ªùi m·ªõi ch∆°i?"
  ‚Üí TL: (Ch·ªâ n√™u ƒëi·ªÅu ki·ªán/ th·ªùi h·∫°n ƒë·ªïi tr·∫£) kh√¥ng n√≥i g√¨ th√™m‚Äù
- KH: "B·∫£o h√†nh ra sao? V√† n√™n ch·ªçn size gi√†y n√†o?"
  ‚Üí TL: (Ch·ªâ n√™u b·∫£o h√†nh) .
  - KH: "V·ª£t yonex duora 10 d√†nh cho tr√¨nh n√†o?"
  ‚Üí TL: "" .

Schema (n·ªôi dung ch√≠nh s√°ch):
{schema}

L·ªãch s·ª≠ giao ti·∫øp (n·∫øu c√≥):
{historyFormatted}
    `.trim(),
    ],
    new MessagesPlaceholder("messages"),
]);

const policyChain = RunnableSequence.from([policyPromptTemplate, model]);

export async function policyAgent({ messages, email, history, session_id, intent, answered_intents = [], original_user_msg }) {
    try {
        const logKey = email || session_id;
        const log = (msg, step = null) => pushLog(logKey, { msg, step });
        console.log("üöß policyAgent running !!!!!!!!!!!!");
        log("Tr·ª£ l√≠ ƒëang t√¨m hi·ªÉu v·ªÅ ch√≠nh s√°ch", "intent-policy");

        const embeddings = new OpenAIEmbeddings({
            openAIApiKey: process.env.OPENAI_API_KEY,
        });

        const vectorStore = new Chroma(embeddings, {
            collectionName: "policies",
            url: process.env.CHROMA_URL,
        });

        const userQuestion = messages.at(-1)?.content || "";
        const similarDocs = await vectorStore.similaritySearch(userQuestion, 3);
        const schema = similarDocs.map(doc => doc.pageContent).join("\n\n");

        const historyFormatted = (history || [])
            .map((msg, idx) => {
                if (msg.role === "user") {
                    const next = history[idx + 1];
                    if (next?.role === "ai") {
                        return `KH: ${msg.content}\nAI: ${next.content}`;
                    }
                }
                return null;
            })
            .filter(Boolean)
            .join("\n");

        const response = await policyChain.invoke({
            messages,
            schema,
            historyFormatted,
        });

        const aiText = response.content;

        if (aiText && aiText.trim()) {
            await saveChatHistory({
                email,
                session_id,
                role: "ai",
                content: aiText,
            });
        }

        return {
            messages: [...messages, { role: "ai", content: aiText }],
            answered_intents: [...(answered_intents || []), "policy"],
            current_step: "intent",
        };
    } catch (error) {
        console.error("‚ùå policyAgent failed:", error.message);
        return {
            current_step: "intent",
            error: "policyAgent failed: " + error.message,
        };
    }
}
