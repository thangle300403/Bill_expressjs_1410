import { pushLog } from "../extra/sseLogs.js";

export async function addToCartNode(state) {
    console.log("üõí Tool Adding name to cart is called");
    const { cartProduct, email, session_id } = state;

    // --- Case FAIL: ch∆∞a c√≥ s·∫£n ph·∫©m ---
    if (!cartProduct || !cartProduct.product) {
        console.warn("‚ö†Ô∏è addToCartNode: ch∆∞a c√≥ s·∫£n ph·∫©m, quay l·∫°i match_product");

        const prevUsed = Array.isArray(state.used_tool)
            ? state.used_tool
            : state.used_tool
                ? [state.used_tool]
                : [];

        const newUsedTools = [...new Set([...prevUsed, "match_product"])];

        return {
            ...state,
            messages: [
                ...state.messages,
                {
                    role: "ai",
                    content:
                        "‚ö†Ô∏è T√¥i ch∆∞a t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ th√™m v√†o gi·ªè. ƒê·ªÉ t√¥i ki·ªÉm tra l·∫°i...",
                },
            ],
            current_step: "match_product", // √©p quay l·∫°i match_product
            used_tool: newUsedTools, // ‚úÖ ch·ªâ log match_product
        };
    }

    // --- Case SUCCESS: ƒë√£ c√≥ product ---
    const p = cartProduct.product;

    const logKey = email || session_id;
    const log = (msg, step) => pushLog(logKey, { msg, step });

    console.log("logKey in addToCartNode:", logKey);

    console.log("üõí Tool Adding name to cart:", p.name);
    log(`üõí ƒêang x·ª≠ l√Ω th√™m s·∫£n ph·∫©m **${p.name}** v√†o gi·ªè...`, "add-to-cart");

    const hasDiscount =
        p.discount_percentage > 0 && p.discount_from_date && p.discount_to_date;

    log(`ƒêang xem c√≥ gi·∫£m gi√° hay kh√¥ng: ${hasDiscount}`, "sale_price");

    const sale_price = hasDiscount
        ? Math.round(p.price * (1 - p.discount_percentage / 100))
        : p.price;

    const item = {
        id: p.id,
        name: p.name,
        sale_price,
        imageUrl: `${process.env.IMAGE_BASE_URL}/${p.featured_image}`,
        quantity: cartProduct.quantity,
    };

    console.log("üõí Tool Adding item to cart:", item.name);
    log(`T·ªïng h·ª£p th√¥ng tin s·∫£n ph·∫©m`, "product-info-added-to-cart");

    const prevUsed = Array.isArray(state.used_tool)
        ? state.used_tool
        : state.used_tool
            ? [state.used_tool]
            : [];

    const newUsedTools = [...new Set([...prevUsed, "add_to_cart"])];

    return {
        ...state,
        messages: [
            ...state.messages,
            {
                role: "ai",
                content: `...`,
                additional_kwargs: { tag: "add_to_cart_confirmation" },
            },
        ],
        cartOutput: {
            role: "ai",
            action: "add_to_cart",
            item, // ‚úÖ frontend c√≥ th·ªÉ push th·∫≥ng v√†o localStorage
        },
        current_step: "consult",
        used_tool: newUsedTools, // ‚úÖ ch·ªâ log add_to_cart khi th√†nh c√¥ng
    };
}
