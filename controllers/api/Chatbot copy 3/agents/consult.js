//CONSULTAGENT
import { ChatPromptTemplate, MessagesPlaceholder } from "@langchain/core/prompts";
import { RunnableSequence } from "@langchain/core/runnables";
import productModel from "../../../../models/Product.js";
import slugify from "slugify";
import { saveChatHistory } from "../memory/saveChatHistory.js";
import { searchSimilar } from "../vectorStore.js";
import aiChatbotModel from "../../../../models/Chatbot.js";
import { encrypt } from "../extra/encrypt.js";
import { ChatOpenAI } from "@langchain/openai";
import { getVectorStore } from "../vectorStore.js";

const model = new ChatOpenAI({
    openAIApiKey: process.env.OPENAI_API_KEY,
    modelName: "gpt-4o",
    temperature: 0.3,
});

const consultPromptTemplate = ChatPromptTemplate.fromMessages([
    ["system", `
B·∫°n l√† tr·ª£ l√Ω AI t∆∞ v·∫•n c·∫ßu l√¥ng c·ªßa shop.
Am hi·ªÉu t·∫•t c·∫£ nh·ªØng ki·∫øn th·ª©c v·ªÅ c·∫ßu l√¥ng.
Tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán.
Ch·ªâ t∆∞ v·∫•n c√°c s·∫£n ph·∫©m li√™n quan ƒë·∫øn c√¢u h·ªèi kh√°ch.
G·ª£i √Ω ƒë√∫ng tr√¨nh ƒë·ªô ng∆∞·ªùi ch∆°i v√† gi√° h·ª£p l√Ω.
N·∫øu kh√°ch h·ªèi m∆° h·ªì, h√£y h·ªèi l·∫°i r√µ nhu c·∫ßu.
- Sau khi t∆∞ v·∫•n, H√ÉY G·ª¢I √ù m·ªôt c√¢u h·ªèi ti·∫øp theo ƒë·ªÉ h·ªó tr·ª£ th√™m (VD: ‚ÄúAnh/ch·ªã c·∫ßn th√™m g·ª£i √Ω v·ªÅ gi√†y ho·∫∑c ph·ª• ki·ªán kh√¥ng?‚Äù)

S·∫£n ph·∫©m ƒëang b√°n: {productList}

l·ªãch s·ª≠ giao ti·∫øp (·ªü database): {historyFormatted}, c√≥ th·ªÉ d·ª±a v√†o ƒë√¢y ƒë·ªÉ s·ª≠a l·ªói c·ªßa b·∫°n.
L·ªãch s·ª≠ c√≥ embedingvector g·∫ßn gi·ªëng nh·∫•t: {context}

Sau m·ªói c√¢u tr·∫£ l·ªùi, h√£y quy·∫øt ƒë·ªãnh xem b·∫°n n√™n ti·∫øp t·ª•c t∆∞ v·∫•n hay k·∫øt th√∫c intent n√†y.

C√°ch quy·∫øt ƒë·ªãnh:
- N·∫øu ng∆∞·ªùi d√πng v·∫´n ƒëang h·ªèi v·ªÅ s·∫£n ph·∫©m, c√≤n do d·ª±, ƒëang so s√°nh, ho·∫∑c h·ªèi th√™m ‚Üí ti·∫øp t·ª•c t∆∞ v·∫•n (exit = false)
- N·∫øu ng∆∞·ªùi d√πng k·∫øt th√∫c, chuy·ªÉn ch·ªß ƒë·ªÅ, ho·∫∑c kh√¥ng c√≤n quan t√¢m ‚Üí k·∫øt th√∫c (exit = true)

Lu√¥n tr·∫£ v·ªÅ JSON nh∆∞ sau:
{
  "reply": "tin nh·∫Øn b·∫°n mu·ªën g·ª≠i",
  "exit": true ho·∫∑c false
}
  `],
    new MessagesPlaceholder("messages"),
]);

const consultChain = RunnableSequence.from([consultPromptTemplate, model]);

export async function consultAgent({ messages, email, history, intent, answered_intents = [], original_user_msg }) {
    try {
        console.log("üöß consultBudd running !!!!!!!!!!!!! ");
        await getVectorStore("consult_docs");
        const userQuestion = messages.at(-1)?.content || "";

        console.log("üöß consult intent:", intent);

        const products = await productModel.getAll();

        const productList = products
            .map(p => `${p.name} (gi√° ${p.price}ƒë)`)
            .join(", ");

        const encryptedMessage = encrypt(intent);
        const rawHistory = await aiChatbotModel.findByMessageAndEmail(encryptedMessage, email);

        // console.log("... Rebuilding Chroma from DB");

        // for (const row of rawHistory) {
        //     await addToVectorStore({
        //         question: row.question,
        //         answer: row.ai_answer,
        //         email,
        //         type: intent,
        //     }, "consult_docs");
        // }

        // console.log("‚úÖ Rebuilt Chroma memory from DB");

        const historyFormatted = rawHistory.map(row => {
            return `KH: ${row.question}\nAI: ${row.ai_answer}`;
        }).join("\n");

        const similar = await searchSimilar(userQuestion, 5, 0.7, "consult_docs");
        const context = similar.map(doc =>
            `KH: ${doc.pageContent}\nAI: ${doc.metadata.answer}`
        ).join("\n");

        console.log("‚úÖconsult context");

        // const response = await consultChain.invoke({
        //     messages,
        //     productList,
        //     historyFormatted,
        // });
        const response = await consultChain.invoke({
            messages,
            productList,
            historyFormatted,
            context,
        });

        const reply = response.content;
        let exit = true;

        try {
            const parsed = JSON.parse(response.content);
            reply = parsed.reply;
            exit = parsed.exit;
        } catch (err) {
            console.warn("‚ùå Failed to parse JSON, assuming exit = true");
        }

        console.log("‚úÖconsult reply");

        // Auto-match product names mentioned in AI response
        const matched = products.filter(p =>
            reply.toLowerCase().includes(p.name.toLowerCase())
        );

        let productDetailUrls = "";
        if (matched.length > 0) {
            const urls = matched.map(p => {
                const slug = slugify(p.name, { lower: true });
                const url = `${process.env.FRONTEND_URL_NEXT}/san-pham/${slug}-${p.id}`;
                return `[${p.name}](${url})`;
            });
            productDetailUrls = `\nüì¶ Xem chi ti·∫øt:\n${urls.join("\n")}`;
        }

        console.log("‚úÖconsult product url:", productDetailUrls);

        await saveChatHistory({
            email,
            question: original_user_msg || "",
            aiAnswer: reply + productDetailUrls,
            type: "consult",
            sql: null,
            dbRows: []
        });

        return {
            messages: [
                ...messages,
                { role: "ai", content: reply + productDetailUrls }
            ],
            answered_intents: [...(answered_intents || []), "consult"],
            current_step: exit ? "intent" : "consult",
        };
    } catch (error) {
        console.error("‚ùå consultAgent failed:", error.message);
        return {
            current_step: "planner",
            error: "consultAgent failed: " + error.message,
        };
    }
}