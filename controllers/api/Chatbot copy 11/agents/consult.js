//CONSULTAGENT
import { ChatMessagePromptTemplate, ChatPromptTemplate, MessagesPlaceholder } from "@langchain/core/prompts";
import { RunnableSequence } from "@langchain/core/runnables";
import productModel from "../../../../models/Product.js";
import slugify from "slugify";
import { searchSimilar } from "../vectorStore.js";
import { getVectorStore } from "../vectorStore.js";
import { model } from "../../../../controllers/api/Chatbot/llm.js";
import { pushLog } from "../extra/sseLogs.js";
import dotenv from "dotenv";
import { getProductCache, isProductCacheLoaded } from "../cache/productCache.js";
dotenv.config();

function looksLikeJSON(text) {
    return text.trim().startsWith("{") && text.trim().endsWith("}");
}

function normalize(text) {
    return text.toLowerCase().replace(/[^a-z0-9]/g, "");
}

const consultPromptTemplate = ChatPromptTemplate.fromMessages([
    ["system", `
You are an AI assistant specializing in badminton equipment consultation for a shop. 
You ONLY advise about badminton gear (rackets, shoes, apparel, etc.). 
Do not answer about policies or prices ‚Äì those are handled by other agents.

Always introduce yourself briefly.
Be friendly and concise.
Recommend products that match the customer‚Äôs level and budget.
If the customer‚Äôs request is vague, ask clarifying questions.
After giving advice, ALWAYS suggest a follow-up question like 
"B·∫°n c√≥ mu·ªën th√™m s·∫£n ph·∫©m n√†y v√†o gi·ªè h√†ng kh√¥ng?" (in Vietnamese).

NOTE:
Some times more than one tool will be used, but match_product must always use first. exmaple: T√¥i mu·ªën mua Yonex Astrox 100ZZ, call tool "current_step": "match_product" first to detect product then call "current_step": "add_to_cart".
You know when there are products in the user message, you must call "current_step": "match_product" first to detect product then call "current_step": "add_to_cart".
Sometimes queston like: V·ª£t cho ng∆∞·ªùi ƒë·∫≠p m·∫°nh, m·ªõi ch∆°i no product provided then u just need to consult no tools needed to use give answer then go to intent.
- Each tool can only be used ONCE, If a tool is already in usedTools, do not call it again.  
- current_step = "intent" (When no more toolss are needed)
- All final responses visible to the customer must be in Vietnamese.
Always look at the Semantic context to consult to customer, just consult when no brand and price are given.

== Output Requirements ==
- For consult-only: reply in plain Vietnamese text.  
- For tool calls: reply in JSON exactly as shown, with "response" in Vietnamese.

== Data Provided ==
- Product list: {productList}
- Conversation history: {historyFormatted}
- Product descriptions  (Semantic context): {productContext} 
- Tools already used usedTools: {usedTools}
- Tools available: {availableTools}  
- Products detected in user‚Äôs message: {matchedProdInUserQues}
‚ö†Ô∏è If 'matchedProdInUserQues' is NOT EMPTY, it means those products DEFINITELY exist in stock. 
Do NOT say they are unavailable or out of stock.

== Rules ==
tr·∫£ l·ªùi b·∫±ng ƒê√öNG C√ö PH√ÅP JSON nh∆∞ sau:
{{  
  "response": "<c√¢u tr·∫£ l·ªùi>",  
  "current_step": "add_to_cart" || "match_product || etc."
    }}
  `],

    new MessagesPlaceholder("messages"),
]);



const consultChain = RunnableSequence.from([consultPromptTemplate, model]);

export async function consultAgent({ messages, email, history, session_id, intent, answered_intents = [], original_user_msg, used_tool, cartProduct, matchedProdInUserQues = [], topMatchedProduct }) {
    try {
        const logKey = email || session_id;
        const log = (msg, step = null) => pushLog(logKey, { msg, step });

        console.log("‚úÖ consultAgent received topMatchedProduct:", topMatchedProduct?.name);

        console.log("üöß !!!!!!!! Now we enter:", intent);
        log(`Tr·ª£ l√≠ ƒëang t∆∞ v·∫•n`, "intent-consult");

        const products = await getProductCache();

        const productList = products
            .map(p => `${p.name} (gi√° ${p.price}ƒë)`)
            .join(", ");

        const toolList = ["add_to_cart", "match_product"];

        const usedTools = Array.isArray(used_tool) ? used_tool : (used_tool ? [used_tool] : []);

        console.log("üöß usedTools:", usedTools);

        const availableTools = toolList.filter(t => !usedTools.includes(t)).join(", ");

        const userQuestion = messages.at(-1)?.content || "";

        log(`ƒêang l∆∞u l·∫°i l·ªãch s·ª≠ giao ti·∫øp`, "consult-his");
        const historyFormatted = (history || [])
            .map((msg, idx) => {
                if (msg.role === "user") {
                    const next = history[idx + 1];
                    if (next?.role === "ai") {
                        return `KH: ${msg.content}\nAI: ${next.content}`;
                    }
                }
                return null;
            })
            .filter(Boolean)
            .join("\n");

        log(`ƒêang lt√¨m ki·∫øm c√°c s·∫£n ph·∫©m ph√π h·ª£p`, "consult-his");
        const productVectorStore = await getVectorStore("product_descriptions");
        const similarProducts = await productVectorStore.similaritySearch(userQuestion, 3);
        const productContext = similarProducts
            .map((doc, idx) => `#${idx + 1} ${doc.pageContent}`)
            .join("\n");

        log(`Bill t·ªïng h·ª£p d·ªØ li·ªáu g·ª≠i cho tr·ª£ l√≠ t∆∞ v·∫•n `, "consult-invoke");

        const response = await consultChain.invoke({
            messages,
            productList,
            historyFormatted,
            usedTools,
            availableTools,
            productContext,
            matchedProdInUserQues,
        });

        let raw = response.content.trim();

        console.log("üöß raw:", raw);

        // üîß Fix LLM output that is wrapped in markdown ```json
        if (raw.startsWith("```json")) {
            raw = raw.replace(/^```json\s*/, "").replace(/```$/, "").trim();
        } else if (raw.startsWith("```")) {
            raw = raw.replace(/^```\s*/, "").replace(/```$/, "").trim();
        }

        log(`Ki·ªÉm tra tool s·∫Ω d√πng`, "consult-check");
        //check tool x√†i ch∆∞a
        let parsed, aiText;

        try {
            if (!looksLikeJSON(raw)) throw new Error("Quick reject: Not JSON");

            parsed = JSON.parse(raw);

            if (parsed.current_step === "add_to_cart") {
                aiText = ""; // ho·∫∑c b·∫°n c√≥ th·ªÉ cho `null` n·∫øu c·∫ßn
            } else {
                aiText = parsed.response;
            }

            if (usedTools.includes(parsed.current_step)) {
                console.warn(`‚ö†Ô∏è Tool "${parsed.current_step}" was already used. Downgrading to "intent".`);
                parsed.current_step = "intent";
            }
        } catch (e) {
            console.warn("‚ö†Ô∏è Not valid JSON. Treating as plain text response.");
            parsed = { current_step: "intent" };
            aiText = raw;
        }

        log(`Tr·ª£ l√≠ ƒëang chu·∫©n b·ªã s·∫£n ph·∫©m`, "consult-matched");

        //l·∫•y card product
        const matched = [];
        const seenNames = new Set();

        for (const p of products) {
            if (
                aiText.toLowerCase().includes(p.name.toLowerCase()) &&
                !seenNames.has(p.name)
            ) {
                matched.push(p);
                seenNames.add(p.name);
            }
        }
        let productDetailUrls = "";
        console.log("üöÄ IMAGE_BASE_URL =", process.env.IMAGE_BASE_URL);

        if (matched.length > 0) {
            const urls = matched.map((p) => {
                const slug = slugify(p.name, { lower: true });
                const url = `${process.env.FRONTEND_URL_NEXT}/san-pham/${slug}-${p.id}`;
                const encodedMsg = encodeURIComponent(`t√¥i mu·ªën th√™m ${p.name} v√†o gi·ªè h√†ng`);
                const imgSrc = `${process.env.IMAGE_BASE_URL}/${p.featured_image}`;

                return `
<div class="product-card" 
     style="border: 1px solid #ccc; border-radius: 8px; 
            padding: 8px; margin-bottom: 8px; 
            display: flex; align-items: center; gap: 10px; 
            background: #f8f9fa; max-width: 400px;">

  <!-- Image -->
  <img src="${imgSrc}" alt="${p.name}" 
       style="width: 70px; height: 70px; object-fit: contain; border-radius: 6px;" />

  <!-- Info -->
  <div style="flex: 1; line-height: 1.3;">
    <a href="${url}" 
       style="font-weight: bold; font-size: 14px; color: #1D4ED8; display: block; margin-bottom: 4px;" 
       target="_blank">${p.name}</a>
    <span style="font-size: 13px; color: #16A34A;">üí∞ ${p.price.toLocaleString()}ƒë</span>
  </div>

  <!-- Small Button -->
  <button class="add-to-cart-btn" 
          data-product="${p.name}" data-msg="${encodedMsg}" 
          style="background: #FACC15; color: #000; border: none; 
                 padding: 4px 8px; border-radius: 4px; 
                 font-size: 12px; font-weight: 500; cursor: pointer;">
    üõí Th√™m
  </button>
</div>
  `.trim();
            });

            productDetailUrls = `\n${urls.join("\n")}`;
        }

        console.log("Consult agent curent_step:", parsed.current_step);
        // normalize and accumulate answered intents without duplicates
        const prevAnswered = Array.isArray(answered_intents)
            ? answered_intents
            : answered_intents
                ? [answered_intents]
                : [];
        const newAnswered = [...new Set([...prevAnswered, "consult"])];

        // normalize and accumulate used tools without duplicates
        const prevUsed = Array.isArray(used_tool)
            ? used_tool
            : used_tool
                ? [used_tool]
                : [];

        let newUsedTools = [...prevUsed];
        if (parsed.current_step && parsed.current_step !== "intent") {
            if (parsed.current_step === "add_to_cart") {
                if (topMatchedProduct) {
                    newUsedTools = [...new Set([...prevUsed, "add_to_cart"])];
                }
            } else {
                newUsedTools = [...new Set([...prevUsed, parsed.current_step])];
            }
        }

        return {
            messages: [
                ...messages,
                {
                    role: "ai",
                    content: aiText + productDetailUrls,
                    additional_kwargs: { tag: "consult_reply" },
                }
            ],
            answered_intents: newAnswered,
            current_step: parsed.current_step,
            used_tool: newUsedTools,
            cartProduct: ["add_to_cart"].includes(parsed.current_step) && topMatchedProduct
                ? { product: topMatchedProduct, quantity: 1 }
                : undefined,
        };
    } catch (error) {
        console.error("‚ùå consultAgent failed:", error.message);
        return {
            current_step: "intent",
            error: "consultAgent failed: " + error.message,
        };
    }
}