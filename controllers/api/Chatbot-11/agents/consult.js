//CONSULTAGENT
import { ChatPromptTemplate, MessagesPlaceholder } from "@langchain/core/prompts";
import { RunnableSequence } from "@langchain/core/runnables";
import productModel from "../../../../models/Product.js";
import slugify from "slugify";
import { searchSimilar } from "../vectorStore.js";
import { getVectorStore } from "../vectorStore.js";
import { model } from "../../../../controllers/api/Chatbot/llm.js";
import { pushLog } from "../extra/sseLogs.js";
import dotenv from "dotenv";
dotenv.config();

function looksLikeJSON(text) {
    return text.trim().startsWith("{") && text.trim().endsWith("}");
}

function normalize(text) {
    return text.toLowerCase().replace(/[^a-z0-9]/g, "");
}

const consultPromptTemplate = ChatPromptTemplate.fromMessages([
    ["system", `
B·∫°n l√† tr·ª£ l√Ω AI t∆∞ v·∫•n v·ªÅ nhu c·∫ßu ng∆∞·ªùi ch∆°i v·ªÅ c·∫ßu l√¥ng c·ªßa shop, ch·ªâ v√† ch·ªâ v·ªÅ nhu c·∫ßu ng∆∞·ªùi ch∆°i v·ªÅ c·∫ßu l√¥ng th√¥i xin vui l√≤ng ƒë·ª´ng tr·∫£ l·ªùi v·ªÅ c√°c policies ho·∫∑c gi√° c·∫£
(policies v√† gi√° c·∫£ l√† th√¥ng tin b·∫£o m·∫≠t)
C√°c c√¥ng vi·ªác kh√°c s·∫Ω ƒë∆∞·ª£c c√°c tr·ª£ l√≠ kh√°c x·ª≠ l√≠ g·ªìm c√°c agent: consult, policy, cancel order.

H√£y nh·ªõ gi·ªõi thi·ªáu b·∫°n.
Am hi·ªÉu t·∫•t c·∫£ nh·ªØng ki·∫øn th·ª©c v·ªÅ c·∫ßu l√¥ng.
Tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán.
Ch·ªâ t∆∞ v·∫•n c√°c s·∫£n ph·∫©m li√™n quan ƒë·∫øn c√¢u h·ªèi kh√°ch.
G·ª£i √Ω ƒë√∫ng tr√¨nh ƒë·ªô ng∆∞·ªùi ch∆°i v√† gi√° h·ª£p l√Ω.
N·∫øu kh√°ch h·ªèi m∆° h·ªì, h√£y h·ªèi l·∫°i r√µ nhu c·∫ßu.
- Sau khi t∆∞ v·∫•n, H√ÉY G·ª¢I √ù m·ªôt c√¢u h·ªèi ti·∫øp theo ƒë·ªÉ kh√°ch c√≥ mu·ªën mua s·∫£n ph·∫©m 
    (vd: B·∫°n c√≥ mu·ªën th√™m s·∫£n ph·∫©m ... v√†o gi·ªè h√†ng hay t√¨m ki·ªÉu th√™m s·∫£n ph·∫©m)

ƒê√¥i l√∫c kh√¥ng c·∫ßn s·ª≠ d·ª•ng tool ch·ªâ t∆∞ v·∫•n, 

== D·ªØ li·ªáu ==
S·∫£n ph·∫©m ƒëang b√°n c·ªßa shop ch·ªâ t∆∞ v·∫•n v·ª£t trong ƒë√¢y: {productList}, v√¨ ƒë√¥i l√∫c kh√°ch h√†ng c√≥ th·ªÉ ƒëi·ªÅn sai ch√≠nh t·∫£ s·∫£n ph·∫©m.
D·ª±a v√†o l·ªãch s·ª≠ giao ti·∫øp (·ªü database) ƒë·ªÉ ƒë∆∞a c√¢u tr·∫£ l·ªùi ƒë√∫ng h∆°n: {historyFormatted}.
M√¥ t·∫£ s·∫£n ph·∫©m g·∫ßn gi·ªëng nh·∫•t: {productContext}.
Tool ƒë√£ d√πng: {usedTools}.
Tool c√≥ s·∫µn: {availableTools}.
S·∫£n ph·∫©m c√≥ trong c√¢u h·ªèi c·ªßa kh√°ch h√†ng: {matchedProdInUserQues}.
N·∫øu 'matchedProdInUserQues' KH√îNG R·ªñNG, nghƒ©a l√† s·∫£n ph·∫©m ƒë√≥ ch·∫Øc ch·∫Øn C√ì TRONG KHO, KH√îNG ƒë∆∞·ª£c tr·∫£ l·ªùi r·∫±ng KH√îNG c√≥ ho·∫∑c H·∫æT H√ÄNG.

== Nhi·ªám v·ª• b·ªï sung ==
D·ª±a v√†o to√†n b·ªô th√¥ng tin ·ªü tr√™n, h√£y ph√¢n t√≠ch xem kh√°ch c√≥ c·∫ßn:
- current_step = "add_to_cart" (Kh√°ch mu·ªën th√™m v√†o gi·ªè h√†ng v√† danh s√°ch 'matchedProdInUserQues' c√≥ s·∫£n ph·∫©m)
KH√îNG ƒê∆Ø·ª¢C t·ª± ƒëo√°n. N·∫øu c√≥ nghi ng·ªù, h√£y g·ªçi tool.- current_step = "intent" (Khi kh√¥ng c√≥ s·ª≠ d·ª•ng th√™m tool n√†o)
1 tool ch·ªâ ƒë∆∞·ª£c d√πng duy nh·∫•t 1 l·∫ßn (Ch·ªâ ch·ªçn tool kh√¥ng c√≥ trong danh s√°ch usedTools)

== H∆∞·ªõng d·∫´n quan tr·ªçng ==
- N·∫øu b·∫°n ch·ªâ t∆∞ v·∫•n: tr·∫£ l·ªùi d∆∞·ªõi d·∫°ng VƒÇN B·∫¢N B√åNH TH∆Ø·ªúNG, KH√îNG b·ªçc JSON.
- N·∫øu b·∫°n mu·ªën kh√°ch h√†ng th√™m v√†o gi·ªè h√†ng: tr·∫£ l·ªùi b·∫±ng ƒê√öNG C√ö PH√ÅP JSON nh∆∞ sau:
{{  
  "response": "<c√¢u tr·∫£ l·ªùi>",  
  "current_step": "add_to_cart" 
    }}
`],
    new MessagesPlaceholder("messages"),
]);

const consultChain = RunnableSequence.from([consultPromptTemplate, model]);

export async function consultAgent({ messages, email, history, session_id, intent, answered_intents = [], original_user_msg, used_tool, cartProduct }) {
    try {
        const logKey = email || session_id;
        const log = (msg, step = null) => pushLog(logKey, { msg, step });

        console.log("üöß !!!!!!!! Now we enter:", intent);
        log(`Tr·ª£ l√≠ ƒëang t∆∞ v·∫•n`, "intent-consult");

        const products = await productModel.getAll();

        const productList = products
            .map(p => `${p.name} (gi√° ${p.price}ƒë)`)
            .join(", ");

        const toolList = ["add_to_cart"];
        const usedTools = Array.isArray(used_tool) ? used_tool : (used_tool ? [used_tool] : []);

        console.log("üöß usedTools:", usedTools);

        const availableTools = toolList.filter(t => !usedTools.includes(t)).join(", ");

        const userQuestion = messages.at(-1)?.content || "";

        const normalize = (str) => str.toLowerCase().replace(/[^a-z0-9]/g, "");

        log(`Tr·ª£ l√≠ ƒëang ki·ªÉm tra s·∫£n ph·∫©m c√≥ trong c√¢u h·ªèi kh√°ch h√†ng`, "consult-matchedProdInUserQues");

        const normalizedQ = normalize(userQuestion);
        const filtered = products.filter(p => normalizedQ.includes(normalize(p.name)));

        const topMatchedProduct = filtered[0];

        // matchedProdInUserQues ƒë·ªÉ ƒë∆∞a v√†o prompt
        const matchedProdInUserQues = filtered.map(
            (p) => `${p.name} (gi√° ${p.price}ƒë)`
        );

        console.log("üöß matchedProdInUserQues:", matchedProdInUserQues);

        log(`Tr·ª£ l√≠ ƒëang nh·ªõ l·∫°i l·ªãch s·ª≠ giao ti·∫øp`, "consult-his");
        const historyFormatted = (history || [])
            .map((msg, idx) => {
                if (msg.role === "user") {
                    const next = history[idx + 1];
                    if (next?.role === "ai") {
                        return `KH: ${msg.content}\nAI: ${next.content}`;
                    }
                }
                return null;
            })
            .filter(Boolean)
            .join("\n");

        // const similar = await searchSimilar(userQuestion, 5, 0.7, "consult_docs");
        // const context = similar.map(doc =>
        //     `KH: ${doc.pageContent}\nAI: ${doc.metadata.answer}`
        // ).join("\n");

        log(`Tr·ª£ l√≠ xem chi ti·∫øt ph·∫ßn m√¥ t·∫£ c·ªßa c√°c s·∫£n ph·∫©m`, "consult-his");

        const productVectorStore = await getVectorStore("product_descriptions");
        const similarProducts = await productVectorStore.similaritySearch(userQuestion, 3);
        const productContext = similarProducts
            .map((doc, idx) => `#${idx + 1} ${doc.pageContent}`)
            .join("\n");
        log(`Tr·ª£ l√≠ ƒëang ho√†n th√†nh ph·∫ßn t∆∞ v·∫•n`, "consult-invoke");

        const response = await consultChain.invoke({
            messages,
            productList,
            historyFormatted,
            usedTools,
            availableTools,
            productContext,
            matchedProdInUserQues,
        });

        log(`Tr·ª£ l√≠ ho√†n th√†nh ph·∫ßn t∆∞ v·∫•n`, "consult-invoke-done");

        const raw = response.content.trim();
        // if model requests a tool already used, override to intent
        // if (usedTools.includes(parsed.current_step)) {
        //     parsed.current_step = "intent";
        // }

        console.log("üöß raw:", raw);

        //check tool x√†i ch∆∞a
        let parsed, aiText;

        log(`Tr·ª£ l√≠ ph√¢n t√≠ch ph·∫ßn t∆∞ v·∫•n`, "consult-parse");
        try {
            if (!looksLikeJSON(raw)) throw new Error("Quick reject: Not JSON");

            parsed = JSON.parse(raw);

            if (parsed.current_step === "add_to_cart") {
                aiText = ""; // ho·∫∑c b·∫°n c√≥ th·ªÉ cho `null` n·∫øu c·∫ßn
            } else {
                aiText = parsed.response;
            }

            if (usedTools.includes(parsed.current_step)) {
                console.warn(`‚ö†Ô∏è Tool "${parsed.current_step}" was already used. Downgrading to "intent".`);
                parsed.current_step = "intent";
            }
        } catch (e) {
            console.warn("‚ö†Ô∏è Not valid JSON. Treating as plain text response.");
            parsed = { current_step: "intent" };
            aiText = raw;
        }

        //l·∫•y card product
        log(`Tr·ª£ l√≠ ph√¢n t√≠ch ph·∫ßn t∆∞ v·∫•n oooo`, "consult-parse-done");
        const matched = [];
        const seenNames = new Set();

        for (const p of products) {
            if (
                aiText.toLowerCase().includes(p.name.toLowerCase()) &&
                !seenNames.has(p.name)
            ) {
                matched.push(p);
                seenNames.add(p.name);
            }
        }
        let productDetailUrls = "";
        console.log("üöÄ IMAGE_BASE_URL =", process.env.IMAGE_BASE_URL);
        if (matched.length > 0) {
            const urls = matched.map((p) => {
                const slug = slugify(p.name, { lower: true });
                const url = `${process.env.FRONTEND_URL_NEXT}/san-pham/${slug}-${p.id}`;
                const encodedMsg = encodeURIComponent(`t√¥i mu·ªën th√™m ${p.name} v√†o gi·ªè h√†ng`);
                const imgSrc = `${process.env.IMAGE_BASE_URL}/${p.featured_image}`;

                return `
<div class="product-card" 
     style="border: 1px solid #ccc; border-radius: 8px; 
            padding: 8px; margin-bottom: 8px; 
            display: flex; align-items: center; gap: 10px; 
            background: #f8f9fa; max-width: 400px;">

  <!-- Image -->
  <img src="${imgSrc}" alt="${p.name}" 
       style="width: 70px; height: 70px; object-fit: contain; border-radius: 6px;" />

  <!-- Info -->
  <div style="flex: 1; line-height: 1.3;">
    <a href="${url}" 
       style="font-weight: bold; font-size: 14px; color: #1D4ED8; display: block; margin-bottom: 4px;" 
       target="_blank">${p.name}</a>
    <span style="font-size: 13px; color: #16A34A;">üí∞ ${p.price.toLocaleString()}ƒë</span>
  </div>

  <!-- Small Button -->
  <button class="add-to-cart-btn" 
          data-product="${p.name}" data-msg="${encodedMsg}" 
          style="background: #FACC15; color: #000; border: none; 
                 padding: 4px 8px; border-radius: 4px; 
                 font-size: 12px; font-weight: 500; cursor: pointer;">
    üõí Th√™m
  </button>
</div>
  `.trim();
            });

            productDetailUrls = `\n${urls.join("\n")}`;
        }

        console.log("Consult agent curent_step:", parsed.current_step);
        // normalize and accumulate answered intents without duplicates
        const prevAnswered = Array.isArray(answered_intents)
            ? answered_intents
            : answered_intents
                ? [answered_intents]
                : [];
        const newAnswered = [...new Set([...prevAnswered, "consult"])];
        // normalize and accumulate used tools without duplicates
        const prevUsed = Array.isArray(used_tool)
            ? used_tool
            : used_tool
                ? [used_tool]
                : [];
        const newUsedTools = [...new Set([...prevUsed, parsed.current_step])];
        console.log("AI consult done");
        return {
            messages: [
                ...messages,
                {
                    role: "ai",
                    content: aiText + productDetailUrls,
                    additional_kwargs: { tag: "consult_reply" },
                }
            ],
            answered_intents: newAnswered,
            current_step: parsed.current_step,
            used_tool: newUsedTools,
            cartProduct: ["add_to_cart"].includes(parsed.current_step) && topMatchedProduct
                ? { product: topMatchedProduct, quantity: 1 }
                : undefined,
        };
    } catch (error) {
        console.error("‚ùå consultAgent failed:", error.message);
        return {
            current_step: "intent",
            error: "consultAgent failed: " + error.message,
        };
    }
}