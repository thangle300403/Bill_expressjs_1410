//CONSULTAGENT
import { ChatPromptTemplate, MessagesPlaceholder } from "@langchain/core/prompts";
import { RunnableSequence } from "@langchain/core/runnables";
import productModel from "../../../../models/Product.js";
import slugify from "slugify";
import { saveChatHistory } from "../memory/saveChatHistory.js";
import { searchSimilar } from "../vectorStore.js";
import aiChatbotModel from "../../../../models/Chatbot.js";
import { encrypt } from "../extra/encrypt.js";
import { getVectorStore } from "../vectorStore.js";
import { model } from "../../../../controllers/api/Chatbot/llm.js";


const consultPromptTemplate = ChatPromptTemplate.fromMessages([
    ["system", `
B·∫°n l√† tr·ª£ l√Ω AI t∆∞ v·∫•n c·∫ßu l√¥ng c·ªßa shop.
Am hi·ªÉu t·∫•t c·∫£ nh·ªØng ki·∫øn th·ª©c v·ªÅ c·∫ßu l√¥ng.
Tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán.
Ch·ªâ t∆∞ v·∫•n c√°c s·∫£n ph·∫©m li√™n quan ƒë·∫øn c√¢u h·ªèi kh√°ch.
G·ª£i √Ω ƒë√∫ng tr√¨nh ƒë·ªô ng∆∞·ªùi ch∆°i v√† gi√° h·ª£p l√Ω.
N·∫øu kh√°ch h·ªèi m∆° h·ªì, h√£y h·ªèi l·∫°i r√µ nhu c·∫ßu.
- Sau khi t∆∞ v·∫•n, H√ÉY G·ª¢I √ù m·ªôt c√¢u h·ªèi ti·∫øp theo ƒë·ªÉ h·ªó tr·ª£ th√™m 

== D·ªØ li·ªáu ==
S·∫£n ph·∫©m ƒëang b√°n: {productList}, v√¨ ƒë√¥i l√∫c kh√°ch h√†ng c√≥ th·ªÉ ƒëi·ªÅn sai ch√≠nh t·∫£ s·∫£n ph·∫©m.
D·ª±a v√†o l·ªãch s·ª≠ giao ti·∫øp (·ªü database) ƒë·ªÉ ƒë∆∞a c√¢u tr·∫£ l·ªùi ƒë√∫ng h∆°n: {historyFormatted}.
L·ªãch s·ª≠ c√≥ embedingvector g·∫ßn gi·ªëng nh·∫•t: {context}
Tool ƒë√£ d√πng: {usedTools}
Tool c√≥ s·∫µn: {availableTools}

== Nhi·ªám v·ª• b·ªï sung ==
D·ª±a v√†o to√†n b·ªô th√¥ng tin ·ªü tr√™n, h√£y ph√¢n t√≠ch xem kh√°ch c√≥ c·∫ßn:
- current_step = "add_to_cart" (Kh√°ch mu·ªën th√™m v√†o gi·ªè h√†ng)
- current_step = "intent" (Khi kh√¥ng c√≥ s·ª≠ d·ª•ng th√™m tool n√†o)
1 tool ch·ªâ ƒë∆∞·ª£c d√πng duy nh·∫•t 1 l·∫ßn (Ch·ªâ ch·ªçn tool kh√¥ng c√≥ trong danh s√°ch usedTools)

== Tr·∫£ v·ªÅ d·∫°ng JSON ƒë√∫ng c√∫ ph√°p nh∆∞ sau ==
{{
"response": "<c√¢u tr·∫£ l·ªùi>",
"current_step": "<step>"
    }}
`],
    new MessagesPlaceholder("messages"),
]);

const consultChain = RunnableSequence.from([consultPromptTemplate, model]);

export async function consultAgent({ messages, email, history, intent, answered_intents = [], original_user_msg, used_tool, cartProduct }) {
    try {
        console.log("üöß !!!!!!!! Now we enter:", intent);
        await getVectorStore("consult_docs");

        const toolList = ["add_to_cart"];
        const usedTools = Array.isArray(used_tool) ? used_tool : (used_tool ? [used_tool] : []);
        console.log("üöß usedTools:", usedTools);
        const availableTools = toolList.filter(t => !usedTools.includes(t)).join(", ");

        const userQuestion = messages.at(-1)?.content || "";

        const products = await productModel.getAll();

        const productList = products
            .map(p => `${p.name} (gi√° ${p.price}ƒë)`)
            .join(", ");

        const rawHistory = await aiChatbotModel.findByEmail(email);

        // console.log("... Rebuilding Chroma from DB");

        // for (const row of rawHistory) {
        //     await addToVectorStore({
        //         question: row.question,
        //         answer: row.ai_answer,
        //         email,
        //         type: intent,
        //     }, "consult_docs");
        // }

        // console.log("‚úÖ Rebuilt Chroma memory from DB");

        const historyFormatted = rawHistory.map(row => {
            return `KH: ${row.question}\nAI: ${row.ai_answer}`;
        }).join("\n");

        console.log("‚úÖ Rebuilt historyFormatted from mysql");

        const similar = await searchSimilar(userQuestion, 5, 0.7, "consult_docs");
        const context = similar.map(doc =>
            `KH: ${doc.pageContent}\nAI: ${doc.metadata.answer}`
        ).join("\n");

        // const response = await consultChain.invoke({
        //     messages,
        //     productList,
        //     historyFormatted,
        // });
        const response = await consultChain.invoke({
            messages,
            productList,
            historyFormatted,
            context,
            usedTools,
            availableTools,
        });

        const parsed = JSON.parse(response.content);
        // if model requests a tool already used, override to intent
        if (usedTools.includes(parsed.current_step)) {
            parsed.current_step = "intent";
        }
        const aiText = parsed.response;

        console.log("‚úÖconsult aiText");

        // Auto-match product names mentioned in AI response
        const matched = products.filter(p =>
            aiText.toLowerCase().includes(p.name.toLowerCase())
        );
        if (!matched.length) {
            throw new Error("‚ùå No matched product found, but one was expected.");
        }
        console.log("üõí Match product:", matched[0].name);

        let productDetailUrls = "";
        if (matched.length > 0) {
            const urls = matched.map(p => {
                const slug = slugify(p.name, { lower: true });
                const url = `${process.env.FRONTEND_URL_NEXT}/san-pham/${slug}-${p.id}`;
                return `[${p.name}](${url})`;
            });
            productDetailUrls = `\nüì¶ Xem chi ti·∫øt:\n${urls.join("\n")}`;
        }

        console.log("‚úÖconsult product url:", productDetailUrls);

        await saveChatHistory({
            email,
            question: original_user_msg || "",
            aiAnswer: aiText + productDetailUrls,
            type: "consult",
            sql: null,
            dbRows: []
        });

        console.log("curent_step:", parsed.current_step);
        // normalize and accumulate answered intents without duplicates
        const prevAnswered = Array.isArray(answered_intents)
            ? answered_intents
            : answered_intents
                ? [answered_intents]
                : [];
        const newAnswered = [...new Set([...prevAnswered, "consult"])];
        // normalize and accumulate used tools without duplicates
        const prevUsed = Array.isArray(used_tool)
            ? used_tool
            : used_tool
                ? [used_tool]
                : [];
        const newUsedTools = [...new Set([...prevUsed, parsed.current_step])];

        return {
            messages: [
                ...messages,
                { role: "ai", content: aiText + productDetailUrls }
            ],
            answered_intents: newAnswered,
            current_step: parsed.current_step,
            used_tool: newUsedTools,
            cartProduct: ["add_to_cart"].includes(parsed.current_step)
                ? { product: matched[0], quantity: 1 }
                : undefined,
        };

    } catch (error) {
        console.error("‚ùå consultAgent failed:", error.message);
        return {
            current_step: "planner",
            error: "consultAgent failed: " + error.message,
        };
    }
}