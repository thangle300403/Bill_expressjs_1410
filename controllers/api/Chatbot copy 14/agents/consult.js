// CONSULT AGENT ‚Äî PURE CONSULT VERSION (no tools)
import { ChatMessagePromptTemplate, ChatPromptTemplate, MessagesPlaceholder } from "@langchain/core/prompts";
import { RunnableSequence } from "@langchain/core/runnables";
import { model } from "../../../../controllers/api/Chatbot/llm.js";
import { pushLog } from "../extra/sseLogs.js";
import dotenv from "dotenv";
import { getProductCache } from "../cache/productCache.js";
import { searchSimilarConsult } from "../vectorStore.js";
import { saveChatHistory } from "../memory/saveChatHistory.js";
import { searchSimilar } from "../vectorStore.js";
import { findProductMatches } from "../extra/findProductMatches.js";
dotenv.config();

const consultPromptTemplate = ChatPromptTemplate.fromMessages([
    [
        "system",
        `
B·∫°n l√† tr·ª£ l√Ω AI chuy√™n t∆∞ v·∫•n s·∫£n ph·∫©m c·∫ßu l√¥ng.
Ch·ªâ th·ª±c hi·ªán nhi·ªám v·ª• t∆∞ v·∫•n (KH√îNG s·ª≠ d·ª•ng hay g·ªçi b·∫•t k·ª≥ tool n√†o).

Quy t·∫Øc:
1. T∆∞ v·∫•n chi ti·∫øt v√† th√¢n thi·ªán, b·∫±ng ti·∫øng Vi·ªát.
2. Lu√¥n tham kh·∫£o l·ªãch s·ª≠ h·ªôi tho·∫°i ƒë·ªÉ duy tr√¨ ng·ªØ c·∫£nh, kh√¥ng h·ªèi l·∫°i th√¥ng tin kh√°ch ƒë√£ cung c·∫•p.
3. Kh√¥ng ƒë∆∞·ª£c n√≥i v·ªÅ ch√≠nh s√°ch, h·ªßy ƒë∆°n, ho·∫∑c gi√° s·∫£n ph·∫©m ‚Äî c√°c ph·∫ßn ƒë√≥ do h·ªá th·ªëng kh√°c ph·ª• tr√°ch.
4. N·∫øu kh√°ch h·ªèi m∆° h·ªì, h√£y h·ªèi l·∫°i ƒë·ªÉ l√†m r√µ nhu c·∫ßu (v√≠ d·ª•: tr·ªçng l∆∞·ª£ng, c·∫•p ƒë·ªô ch∆°i).
5. Lu√¥n ƒë∆∞a ra g·ª£i √Ω s·∫£n ph·∫©m ho·∫∑c lo·∫°i s·∫£n ph·∫©m ph√π h·ª£p d·ª±a tr√™n ng·ªØ c·∫£nh.
6. Cu·ªëi c√¢u n√™n g·ª£i m·ªü (‚ÄúB·∫°n c√≥ mu·ªën m√¨nh g·ª£i √Ω th√™m v√†i m·∫´u kh√¥ng?‚Äù).

== D·ªØ li·ªáu tham kh·∫£o ==
- Danh s√°ch s·∫£n ph·∫©m: {productList}
- L·ªãch s·ª≠ h·ªôi tho·∫°i: {historyFormatted}
- Ng·ªØ c·∫£nh s·∫£n ph·∫©m (semantic context): {productContext}

Tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán, ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát, kh√¥ng ƒë·ªãnh d·∫°ng JSON.
`
    ],
    new MessagesPlaceholder("messages"),
]);

const consultChain = RunnableSequence.from([consultPromptTemplate, model]);

function containsProductKeyword(text) {
    if (!text) return false;
    const lower = text.toLowerCase();

    const productKeywords = [
        // th∆∞∆°ng hi·ªáu
        "yonex", "lining", "victor", "mizuno", "apacs", "kawasaki",
        "s·∫£n ph·∫©m",
        // nh√≥m s·∫£n ph·∫©m
        "v·ª£t", "racket", "gi√†y", "shoes", "√°o", "shirt", "qu·∫ßn", "pants",
        "t√∫i", "bag", "d√¢y c∆∞·ªõc", "string", "grip",
        // model ph·ªï bi·∫øn
        "astrox", "duora", "arcsaber", "nanoflare", "power cushion",
    ];

    return productKeywords.some(keyword => lower.includes(keyword));
}


export async function consultAgent({
    messages,
    email,
    history,
    session_id,
    intent,
    answered_intents = [],
    original_user_msg,
}) {
    try {
        const userQuestion = original_user_msg;
        const logKey = email || session_id;
        const log = (msg, step = null) => pushLog(logKey, { msg, step });

        log("üéØ Tr·ª£ l√Ω ƒëang t∆∞ v·∫•n", "consult");

        // L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m t·ª´ cache
        const products = await getProductCache();
        const productList = products
            .map((p) => `${p.name} (gi√° ${p.price}ƒë)`)
            .join(", ");

        // L·∫•y ng·ªØ c·∫£nh s·∫£n ph·∫©m t·ª´ vector store
        let similarProducts = [];

        if (containsProductKeyword(userQuestion)) {
            console.log("üîç Detect product keyword in user question ‚Üí running searchSimilarConsult");
            similarProducts = await searchSimilarConsult(
                userQuestion,
                5,
                0.5,
                "product_descriptions"
            );
        } else {
            console.log("‚ö†Ô∏è No product keyword found in user question ‚Üí skip search");
            // optional: reuse previous product context
            similarProducts = [];
        }

        const productContext = similarProducts
            .map((doc, idx) => `#${idx + 1} ${doc.pageContent}`)
            .join("\n");

        // Format l·ªãch s·ª≠ h·ªôi tho·∫°i
        const historyFormatted = (history || [])
            .map((msg, idx) => {
                if (msg.role === "user") {
                    const next = history[idx + 1];
                    if (next?.role === "ai") {
                        return `KH: ${msg.content}\nAI: ${next.content}`;
                    }
                }
                return null;
            })
            .filter(Boolean)
            .join("\n");

        // T·∫°o prompt & g·ªçi model
        const response = await consultChain.invoke({
            messages,
            productList,
            historyFormatted,
            productContext,
        });

        const aiText = response.content.trim();
        log(`üß† AI tr·∫£ l·ªùi: ${aiText}`, "consult-done");

        const { matched, productDetailUrls } = findProductMatches(aiText, products);

        // L∆∞u l·∫°i l·ªãch s·ª≠ h·ªôi tho·∫°i
        await saveChatHistory({
            email,
            session_id,
            role: "ai",
            content: aiText + productDetailUrls,
        });

        const prevAnswered = Array.isArray(answered_intents)
            ? answered_intents
            : answered_intents
                ? [answered_intents]
                : [];
        const newAnswered = [...new Set([...prevAnswered, "consult"])];

        return {
            messages: [
                ...messages,
                {
                    role: "ai",
                    content: aiText + productDetailUrls,
                    additional_kwargs: { tag: "consult_reply" },
                },
            ],
            answered_intents: newAnswered,
            current_step: "intent", // ‚úÖ lu√¥n quay v·ªÅ intent
        };
    } catch (error) {
        console.error("‚ùå consultAgent failed:", error.message);
        return {
            current_step: "intent",
            error: "consultAgent failed: " + error.message,
        };
    }
}
