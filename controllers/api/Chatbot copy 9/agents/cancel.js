//CANCELAGENT
import { ChatPromptTemplate, MessagesPlaceholder } from "@langchain/core/prompts";
import { RunnableSequence } from "@langchain/core/runnables";
import pool from "../../../../models/db.js";
import { model } from "../../../../controllers/api/Chatbot/llm.js";

const cancelPrompt = ChatPromptTemplate.fromMessages([
    ["system", `
B·∫°n l√† tr·ª£ l√Ω AI x·ª≠ l√Ω y√™u c·∫ßu h·ªßy ƒë∆°n h√†ng.

======== QUY T·∫ÆC TR·∫¢ V·ªÄ ========
- N·∫øu kh√°ch mu·ªën thay ƒë·ªïi ƒë·ªãa ch·ªâ giao h√†ng ho·∫∑c th√¥ng tin v·∫≠n chuy·ªÉn: ‚ûú Tr·∫£ v·ªÅ: CHANGE_ADDRESS
- N·∫øu kh√°ch mu·ªën h·ªßy ƒë∆°n h√†ng (b·∫±ng ch·ªØ ho·∫∑c s·ªë): ‚ûú Tr·∫£ v·ªÅ: **HUY <m√£ ƒë∆°n>**
- N·∫øu kh√°ch x√°c nh·∫≠n h·ªßy: ‚ûú Tr·∫£ v·ªÅ: **CONFIRM <m√£ ƒë∆°n>**
- N·∫øu kh√°ch t·ª´ ch·ªëi h·ªßy: ‚ûú Tr·∫£ v·ªÅ: **CANCEL**
- N·∫øu kh√¥ng hi·ªÉu c√¢u h·ªèi: ‚ûú Tr·∫£ v·ªÅ: **UNKNOWN**

======== V√ç D·ª§ CHU·∫®N ========
Kh√°ch: "T√¥i mu·ªën h·ªßy ƒë∆°n h√†ng 13", "Hu·ª∑ ƒë∆°n 123", exc. ‚ûú HUY 13  
Kh√°ch: "T√¥i mu·ªën x√°c nh·∫≠n hu·ª∑ ƒë∆°n h√†ng s·ªë 10 v·ªõi email abc@gmail.com" ‚ûú CONFIRM 10 email: abc@gmail.com  
Kh√°ch: "[X√ÅC NH·∫¨N H·ª¶Y ƒê∆†N H√ÄNG S·ªê 9 c·ªßa email: xyz@gmail.com]" ‚ûú CONFIRM 9 email: xyz@gmail.com 
Kh√°ch: "[KH√îNG H·ª¶Y ƒê∆†N H√ÄNG S·ªê 9]" ‚ûú CANCEL  
Kh√°ch: "T√¥i c·∫ßn t∆∞ v·∫•n th√™m" ‚Üí UNKNOWN

L·ªãch s·ª≠ giao ti·∫øp (N·∫øu c√≥): {history}
        `],
    new MessagesPlaceholder("messages")
]);

const cancelChain = RunnableSequence.from([cancelPrompt, model]);

export async function cancelAgent({ messages, email, history }) {
    const response = await cancelChain.invoke({ messages, history });
    const result = response.content.trim();

    console.log("result", result);

    const confirmMatch = result.match(/^CONFIRM (\d+)/i);
    const huyMatch = result.match(/^HUY (\d+)/i);
    const isChangeAddress = result.trim() === "CHANGE_ADDRESS";

    if (confirmMatch) {
        const orderId = confirmMatch[1];

        // Extract email from user message using regex
        const emailMatch = messages.at(-1).content.match(
            /email[:\s]*([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/i
        );

        const providedEmail = emailMatch ? emailMatch[1] : null;

        // Check if provided email matches the session/db email
        if (!providedEmail || providedEmail.toLowerCase() !== email.toLowerCase()) {
            const aiAnswer = `‚ùå Email x√°c nh·∫≠n kh√¥ng kh·ªõp v·ªõi t√†i kho·∫£n. Vui l√≤ng nh·∫≠p l·∫°i ƒë√∫ng email ƒë√£ ƒë·∫∑t h√†ng.`;
            return { messages: [{ role: "ai", content: aiAnswer }] };
        }

        try {
            await pool.execute(
                "UPDATE `order` SET order_status_id = 6 WHERE id = ?",
                [orderId]
            );

            const aiAnswer = `‚úÖ ƒê√£ h·ªßy ƒë∆°n h√†ng s·ªë ${orderId} th√†nh c√¥ng. Ch√∫c qu√Ω kh√°ch m·ªôt ng√†y t·ªët l√†nh.`;

            return { messages: [{ role: "ai", content: aiAnswer }] };
        } catch (err) {
            return { messages: [{ content: `‚ùå L·ªói khi h·ªßy ƒë∆°n: ${err.message}` }] };
        }
    }

    if (huyMatch) {
        const orderId = huyMatch[1];
        const aiAnswer = `B·∫°n c√≥ ch·∫Øc mu·ªën h·ªßy ƒë∆°n h√†ng s·ªë ${orderId} kh√¥ng ?\nVui l√≤ng x√°c nh·∫≠n b·∫±ng copy 1 trong 2 l·ª±a ch·ªçn:    [X√ÅC NH·∫¨N H·ª¶Y ƒê∆†N H√ÄNG S·ªê ${orderId} c·ªßa 'email:...' ] ho·∫∑c  [KH√îNG H·ª¶Y]`;
        return { messages: [{ role: "ai", content: aiAnswer }] };
    }

    if (isChangeAddress) {
        const aiAnswer = `
üì¶ B·∫°n c√≥ th·ªÉ thay ƒë·ªïi ƒë·ªãa ch·ªâ giao h√†ng t·∫°i ƒë√¢y:<br/>
üëâ <a href="http://localhost:3000/tai-khoan/dia-chi-giao-hang-mac-dinh" target="_blank" style="color: #1D4ED8; text-decoration: underline;">
Thay ƒë·ªïi ƒë·ªãa ch·ªâ giao h√†ng m·∫∑c ƒë·ªãnh
</a>
    `.trim();

        return { messages: [{ role: "ai", content: aiAnswer }] };
    }


    if (result === "CANCEL") {
        const aiAnswer = "Ch√∫c qu√Ω kh√°ch m·ªôt ng√†y t·ªët l√†nh.";
        return { messages: [{ role: "ai", content: aiAnswer }] };
    }

    const fallback = "Xin h√£y cung c·∫•p m√£ ƒë∆°n h√†ng c·∫ßn h·ªßy, v√≠ d·ª•: 'h·ªßy ƒë∆°n h√†ng s·ªë 123'";
    return { messages: [{ role: "ai", content: fallback }] };
}